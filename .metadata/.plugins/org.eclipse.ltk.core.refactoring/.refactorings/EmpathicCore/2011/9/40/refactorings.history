<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.data.IData.valueOfField(...)&apos; to &apos;valueOf&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.IData.valueOfField(...)&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.data.IData.valueOf(...)&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;valueOfField&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.data{IData.java[IData~valueOfField~QString;~QObject;" name="valueOf" references="true" stamp="1317069926672" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;cl.automind.empathy.data.IDataComparer&apos; to &apos;DataComparer&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.IDataComparer&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.data.DataComparer&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;IDataComparer&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;cl.automind.empathy.data{IDataComparer.java[IDataComparer" matchStrategy="1" name="DataComparer" qualified="false" references="true" similarDeclarations="false" stamp="1317070232571" textual="false" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.data.DataConstrain.field&apos; in &apos;cl.automind.empathy.data.DataConstrain&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataConstrain.field&apos;&#x0D;&#x0A;- Getter method name: &apos;getField&apos;&#x0D;&#x0A;- Setter method name: &apos;setField&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;field&apos;" flags="589830" getter="getField" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.data{DataConstrain.java[DataConstrain^field" insertion="0" setter="setField" stamp="1317094782174" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.data.DataConstrain.value&apos; in &apos;cl.automind.empathy.data.DataConstrain&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataConstrain.value&apos;&#x0D;&#x0A;- Getter method name: &apos;getValue&apos;&#x0D;&#x0A;- Setter method name: &apos;setValue&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;value&apos;" flags="589830" getter="getValue" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.data{DataConstrain.java[DataConstrain^value" insertion="1" setter="setValue" stamp="1317094785770" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractArbiter.empathicKernel&apos; in &apos;cl.automind.empathy.rule.AbstractArbiter&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.empathicKernel&apos;&#x0D;&#x0A;- Getter method name: &apos;getEmpathicKernel&apos;&#x0D;&#x0A;- Setter method name: &apos;setEmpathicKernel&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;empathicKernel&apos;" flags="589830" getter="getEmpathicKernel" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter^empathicKernel" insertion="14" setter="setEmpathicKernel" stamp="1317096102148" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.dataManager&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.dataManager&apos;&#x0D;&#x0A;- Getter method name: &apos;getDataManager&apos;&#x0D;&#x0A;- Setter method name: &apos;setDataManager&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;dataManager&apos;" flags="589830" getter="getDataManager" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^dataManager" insertion="15" setter="setDataManager" stamp="1317139274024" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename compilation unit &apos;cl.automind.empathy.data.IDataSpace.java&apos; to &apos;IDataSource.java&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.IDataSpace.java&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.data.IDataSource.java&apos;" description="Rename compilation unit &apos;IDataSpace.java&apos;" flags="2" id="org.eclipse.jdt.ui.rename.compilationunit" input="/src&lt;cl.automind.empathy.data{IDataSpace.java" name="IDataSource.java" references="false" stamp="1317139789501" version="1.0"/>&#x0A;<refactoring comment="Rename compilation unit &apos;cl.automind.empathy.data.IDataSpaceObserver.java&apos; to &apos;IDataSourceObserver.java&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.IDataSpaceObserver.java&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.data.IDataSourceObserver.java&apos;" description="Rename compilation unit &apos;IDataSpaceObserver.java&apos;" flags="2" id="org.eclipse.jdt.ui.rename.compilationunit" input="/src&lt;cl.automind.empathy.data{IDataSpaceObserver.java" name="IDataSourceObserver.java" references="false" stamp="1317139803170" version="1.0"/>&#x0A;<refactoring comment="Rename compilation unit &apos;cl.automind.empathy.data.WebDataSpace.java&apos; to &apos;WebDataSource.java&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.WebDataSpace.java&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.data.WebDataSource.java&apos;" description="Rename compilation unit &apos;WebDataSpace.java&apos;" flags="2" id="org.eclipse.jdt.ui.rename.compilationunit" input="/src&lt;cl.automind.empathy.data{WebDataSpace.java" name="WebDataSource.java" references="false" stamp="1317139810496" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.IData.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{IData.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317158758665" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.NullData.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{NullData.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317158760859" subPackages="false" version="1.0"/>&#x0A;<refactoring clone="true" comment="Infer generic type arguments on &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original elements:&#x0D;&#x0A;     cl.automind.empathy.data.AbstractDataManager.java&#x0D;&#x0A;- Assume clone() returns an instance of the receiver type&#x0D;&#x0A;- Leave unconstrained type arguments raw" description="Infer generic type arguments" element1="/src&lt;cl.automind.empathy.data{AbstractDataManager.java" flags="6" id="org.eclipse.jdt.ui.infer.typearguments" leave="true" stamp="1317160663213" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.rule.AbstractArbiter.getValidRule()&apos; to &apos;updateAndGetValidRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.getValidRule()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractArbiter.updateAndGetValidRule()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;getValidRule&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter~getValidRule" name="updateAndGetValidRule" references="true" stamp="1317163989554" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;rule&apos; in &apos;cl.automind.empathy.rule.AbstractArbiter.getLessUsedRuleName()&apos; to &apos;rulename&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.getLessUsedRuleName().rule&apos;&#x0D;&#x0A;- Renamed element: &apos;rule&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;rule&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter~getLessUsedRuleName@rule!4702!4712!4709!4712!QString;" name="rulename" references="true" stamp="1317165688219" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;now&apos; in &apos;cl.automind.empathy.rule.AbstractArbiter.getLessUsedRuleName()&apos; to &apos;current&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.getLessUsedRuleName().now&apos;&#x0D;&#x0A;- Renamed element: &apos;now&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;now&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter~getLessUsedRuleName@now!4658!4669!4662!4664!I" name="current" references="true" stamp="1317165694216" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.rule.AbstractRule.getValueById(...)&apos; to &apos;getValueByIdInSource&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.getValueById(...)&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractRule.getValueByIdInSource(...)&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;getValueById&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getValueById~QString;~I" name="getValueByIdInSource" references="true" stamp="1317182202732" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.feedback.AbstractMessage.defaultValues&apos; in &apos;cl.automind.empathy.feedback.AbstractMessage&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractMessage.defaultValues&apos;&#x0D;&#x0A;- Getter method name: &apos;getDefaultValues&apos;&#x0D;&#x0A;- Setter method name: &apos;setDefaultValues&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;defaultValues&apos;" flags="589830" getter="getDefaultValues" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.feedback{AbstractMessage.java[AbstractMessage^defaultValues" insertion="5" setter="setDefaultValues" stamp="1317189520724" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.values&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.values&apos;&#x0D;&#x0A;- Getter method name: &apos;getValues&apos;&#x0D;&#x0A;- Setter method name: &apos;setValues&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;values&apos;" flags="589830" getter="getValues" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^values" insertion="20" setter="setValues" stamp="1317190322997" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename field &apos;values&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos; to &apos;valuesMap&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.values&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractRule.valuesMap&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" delegate="false" deprecate="false" description="Rename field &apos;values&apos;" flags="589826" getter="false" id="org.eclipse.jdt.ui.rename.field" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^values" name="valuesMap" references="true" setter="false" stamp="1317190342826" textual="false" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.valuesMap&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.valuesMap&apos;&#x0D;&#x0A;- Getter method name: &apos;getValuesMap&apos;&#x0D;&#x0A;- Setter method name: &apos;setValuesMap&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;valuesMap&apos;" flags="589830" getter="getValuesMap" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^valuesMap" insertion="20" setter="setValuesMap" stamp="1317190347337" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.feedback.AbstractMessage.getMessage()&apos; to &apos;getText&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractMessage.getMessage()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.feedback.AbstractMessage.getText()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;getMessage&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.feedback{AbstractMessage.java[AbstractMessage~getMessage" name="getText" references="true" stamp="1317191135777" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.feedback.AbstractMessage.getUnfilteredMessage()&apos; to &apos;getUnfilteredText&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractMessage.getUnfilteredMessage()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.feedback.AbstractMessage.getUnfilteredText()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;getUnfilteredMessage&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.feedback{AbstractMessage.java[AbstractMessage~getUnfilteredMessage" name="getUnfilteredText" references="true" stamp="1317191146031" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.feedback.AbstractMessage.getMessage(...)&apos; to &apos;getText&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractMessage.getMessage(...)&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.feedback.AbstractMessage.getText(...)&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;getMessage&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.feedback{AbstractMessage.java[AbstractMessage~getMessage~QMap\&lt;QString;QObject;&gt;;" name="getText" references="true" stamp="1317191233919" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;DefaultMessage.java&apos; to &apos;EmpathicCore/src/cl.automind.empathy.feedback&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Destination element: &apos;EmpathicCore/src/cl.automind.empathy.feedback&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.DefaultMessage.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;cl.automind.empathy.feedback" element1="/src&lt;cl.automind.empathy.rule{DefaultMessage.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1317191375420" units="1" version="1.0"/>&#x0A;&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.preferredMessageClass&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.preferredMessageClass&apos;&#x0D;&#x0A;- Getter method name: &apos;getPreferredMessageClass&apos;&#x0D;&#x0A;- Setter method name: &apos;setPreferredMessageClass&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;preferredMessageClass&apos;" flags="589830" getter="getPreferredMessageClass" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^preferredMessageClass" insertion="24" setter="setPreferredMessageClass" stamp="1317191554018" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename local variable &apos;message&apos; in &apos;cl.automind.empathy.feedback.AbstractMessage.filterMessage(...)&apos; to &apos;text&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractMessage.filterMessage(Map&lt;String, Object&gt;).message&apos;&#x0D;&#x0A;- Renamed element: &apos;message&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;message&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.feedback{AbstractMessage.java[AbstractMessage~filterMessage~QMap\&lt;QString;QObject;&gt;;@message!1066!1102!1073!1079!QString;" name="text" references="true" stamp="1317192266833" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;cl.automind.empathy.ui.AbstractUIManager&apos; to &apos;AbstractUiManager&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.ui.AbstractUIManager&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.ui.AbstractUiManager&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;AbstractUIManager&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;cl.automind.empathy.ui{AbstractUIManager.java[AbstractUIManager" matchStrategy="1" name="AbstractUiManager" qualified="false" references="true" similarDeclarations="false" stamp="1317223293979" textual="false" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.EmpathicKernel.classLoad()&apos; to &apos;loadPlugins&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.EmpathicKernel.classLoad()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.EmpathicKernel.loadPlugins()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;classLoad&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy{EmpathicKernel.java[EmpathicKernel~classLoad" name="loadPlugins" references="true" stamp="1317223413594" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.EmpathicKernel.loadPlugins()&apos; to &apos;loadPluginClasses&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.EmpathicKernel.loadPlugins()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.EmpathicKernel.loadPluginClasses()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;loadPlugins&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy{EmpathicKernel.java[EmpathicKernel~loadPlugins" name="loadPluginClasses" references="true" stamp="1317223426671" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.EmpathicKernel.deployManagers(...)&apos; to &apos;deployPluginManagers&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.EmpathicKernel.deployManagers(...)&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.EmpathicKernel.deployPluginManagers(...)&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;deployManagers&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy{EmpathicKernel.java[EmpathicKernel~deployManagers~QEmpathicPlugin;" name="deployPluginManagers" references="true" stamp="1317225283842" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.feedback.AbstractEmotion.families&apos; in &apos;cl.automind.empathy.feedback.AbstractEmotion&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractEmotion.families&apos;&#x0D;&#x0A;- Getter method name: &apos;getFamilies&apos;&#x0D;&#x0A;- Setter method name: &apos;setFamilies&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;families&apos;" flags="589830" getter="getFamilies" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.feedback{AbstractEmotion.java[AbstractEmotion^families" insertion="3" setter="setFamilies" stamp="1317227818264" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.feedback.AbstractEmotion.hasStrategy(...)&apos; to &apos;hasFamily&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.AbstractEmotion.hasStrategy(...)&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.feedback.AbstractEmotion.hasFamily(...)&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;hasStrategy&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.feedback{AbstractEmotion.java[AbstractEmotion~hasStrategy~QString;" name="hasFamily" references="true" stamp="1317227838269" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.EmotionFactory.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.feedback{EmotionFactory.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317228156675" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.EmpathicKernel.arbiter&apos; in &apos;cl.automind.empathy.EmpathicKernel&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.EmpathicKernel.arbiter&apos;&#x0D;&#x0A;- Getter method name: &apos;getArbiter&apos;&#x0D;&#x0A;- Setter method name: &apos;setArbiter&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;arbiter&apos;" flags="589830" getter="getArbiter" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy{EmpathicKernel.java[EmpathicKernel^arbiter" insertion="13" setter="setArbiter" stamp="1317228493575" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename local variable &apos;rule&apos; in &apos;cl.automind.empathy.ui.AbstractUiManager.registerEmotion(...)&apos; to &apos;emotion&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.ui.AbstractUiManager.registerEmotion(String, AbstractEmotion).rule&apos;&#x0D;&#x0A;- Renamed element: &apos;rule&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;rule&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~registerEmotion~QString;~QAbstractEmotion;@rule!813!832!829!832!QAbstractEmotion;" name="emotion" references="true" stamp="1317228704876" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;ruleName&apos; in &apos;cl.automind.empathy.ui.AbstractUiManager.registerEmotion(...)&apos; to &apos;emotionName&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.ui.AbstractUiManager.registerEmotion(String, AbstractEmotion).ruleName&apos;&#x0D;&#x0A;- Renamed element: &apos;ruleName&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;ruleName&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~registerEmotion~QString;~QAbstractEmotion;@ruleName!796!810!803!810!QString;" name="emotionName" references="true" stamp="1317228711428" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;ruleName&apos; in &apos;cl.automind.empathy.ui.AbstractUiManager.getEmotion(...)&apos; to &apos;emotionName&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.ui.AbstractUiManager.getEmotion(String).ruleName&apos;&#x0D;&#x0A;- Renamed element: &apos;ruleName&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;ruleName&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~getEmotion~QString;@ruleName!944!958!951!958!QString;" name="emotionName" references="true" stamp="1317228716428" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractArbiter.empathicKernel&apos; in &apos;cl.automind.empathy.rule.AbstractArbiter&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.empathicKernel&apos;&#x0D;&#x0A;- Getter method name: &apos;getEmpathicKernel&apos;&#x0D;&#x0A;- Setter method name: &apos;setEmpathicKernel&apos;&#x0D;&#x0A;- Field visibility: &apos;private&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;empathicKernel&apos;" flags="589830" getter="getEmpathicKernel" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter^empathicKernel" insertion="22" setter="setEmpathicKernel" stamp="1317240363087" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.rule.AbstractArbiter.updateAndGetValidRule()&apos; to &apos;getAndUpdateValidRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractArbiter.updateAndGetValidRule()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractArbiter.getAndUpdateValidRule()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;updateAndGetValidRule&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java[AbstractArbiter~updateAndGetValidRule" name="getAndUpdateValidRule" references="true" stamp="1317245587006" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;cl.automind.empathy.feedback.DefaultMessage&apos; to &apos;EmptyMessage&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.feedback.DefaultMessage&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.feedback.EmptyMessage&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;DefaultMessage&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;cl.automind.empathy.feedback{DefaultMessage.java[DefaultMessage" matchStrategy="1" name="EmptyMessage" qualified="false" references="true" similarDeclarations="false" stamp="1317248610777" textual="false" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.mediator&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.mediator&apos;&#x0D;&#x0A;- Getter method name: &apos;getMediator&apos;&#x0D;&#x0A;- Setter method name: &apos;setMediator&apos;&#x0D;&#x0A;- Field visibility: &apos;private&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;mediator&apos;" flags="589830" getter="getMediator" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^mediator" insertion="23" setter="setMediator" stamp="1317250580886" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.dataMediator&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.dataMediator&apos;&#x0D;&#x0A;- Getter method name: &apos;getDataMediator&apos;&#x0D;&#x0A;- Setter method name: &apos;setDataMediator&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;dataMediator&apos;" flags="589830" getter="getDataMediator" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^dataMediator" insertion="21" setter="setDataMediator" stamp="1317250648609" version="1.0" visibility="1"/>&#x0A;&#x0A;&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.DataRuleMediator.dataManager&apos; in &apos;cl.automind.empathy.DataRuleMediator&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.DataRuleMediator.dataManager&apos;&#x0D;&#x0A;- Getter method name: &apos;getDataManager&apos;&#x0D;&#x0A;- Setter method name: &apos;setDataManager&apos;&#x0D;&#x0A;- Field visibility: &apos;protected&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;dataManager&apos;" flags="589830" getter="getDataManager" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy{DataRuleMediator.java[DataRuleMediator^dataManager" insertion="1" setter="setDataManager" stamp="1317250757042" version="1.0" visibility="4"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.DataRuleMediator.ruleManager&apos; in &apos;cl.automind.empathy.DataRuleMediator&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.DataRuleMediator.ruleManager&apos;&#x0D;&#x0A;- Getter method name: &apos;getRuleManager&apos;&#x0D;&#x0A;- Setter method name: &apos;setRuleManager&apos;&#x0D;&#x0A;- Field visibility: &apos;protected&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;ruleManager&apos;" flags="589830" getter="getRuleManager" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy{DataRuleMediator.java[DataRuleMediator^ruleManager" insertion="3" setter="setRuleManager" stamp="1317250771742" version="1.0" visibility="4"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.EmpathicKernel.dataRuleMediator&apos; in &apos;cl.automind.empathy.EmpathicKernel&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.EmpathicKernel.dataRuleMediator&apos;&#x0D;&#x0A;- Getter method name: &apos;getDataRuleMediator&apos;&#x0D;&#x0A;- Setter method name: &apos;setDataRuleMediator&apos;&#x0D;&#x0A;- Field visibility: &apos;private&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;dataRuleMediator&apos;" flags="589830" getter="getDataRuleMediator" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy{EmpathicKernel.java[EmpathicKernel^dataRuleMediator" insertion="19" setter="setDataRuleMediator" stamp="1317251123074" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Encapsulate field &apos;cl.automind.empathy.rule.AbstractRule.value&apos; in &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.value&apos;&#x0D;&#x0A;- Getter method name: &apos;getValue&apos;&#x0D;&#x0A;- Setter method name: &apos;setValue&apos;&#x0D;&#x0A;- Field visibility: &apos;public&apos;&#x0D;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;value&apos;" flags="589830" getter="getValue" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^value" insertion="25" setter="setValue" stamp="1317255101797" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.rule.AbstractRule.passesThreshold()&apos; to &apos;isSe&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.passesThreshold()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractRule.isSe()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;passesThreshold&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~passesThreshold" name="isSe" references="true" stamp="1317255707085" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;cl.automind.empathy.rule.AbstractRule.isSe()&apos; to &apos;isSelectable&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule.isSe()&apos;&#x0D;&#x0A;- Renamed element: &apos;cl.automind.empathy.rule.AbstractRule.isSelectable()&apos;&#x0D;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;isSe&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~isSe" name="isSelectable" references="true" stamp="1317255711676" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;DataRuleMediator.java&apos; to &apos;EmpathicCore/src/cl.automind.empathy.rule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Destination element: &apos;EmpathicCore/src/cl.automind.empathy.rule&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.DataRuleMediator.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;cl.automind.empathy.rule" element1="/src&lt;cl.automind.empathy{DataRuleMediator.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1317266360310" units="1" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;DataRuleMediator.java&apos; to &apos;EmpathicCore/src/cl.automind.empathy&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Destination element: &apos;EmpathicCore/src/cl.automind.empathy&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.DataRuleMediator.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;cl.automind.empathy" element1="/src&lt;cl.automind.empathy.rule{DataRuleMediator.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1317266442820" units="1" version="1.0"/>&#x0A;<refactoring comment="Move 2 elements to &apos;EmpathicCore/src/cl.automind.empathy&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Destination element: &apos;EmpathicCore/src/cl.automind.empathy&apos;&#x0D;&#x0A;- Original elements:&#x0D;&#x0A;     cl.automind.empathy.rule.ArbiterCriterion.java&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractArbiter.java&#x0D;&#x0A;- Update references to refactored element" description="Move compilation units" destination="/src&lt;cl.automind.empathy" element1="/src&lt;cl.automind.empathy.rule{ArbiterCriterion.java" element2="/src&lt;cl.automind.empathy.rule{AbstractArbiter.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1317266465464" units="2" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;DataRuleMediator.java&apos; to &apos;EmpathicCore/src/cl.automind.empathy.rule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Destination element: &apos;EmpathicCore/src/cl.automind.empathy.rule&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.DataRuleMediator.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;cl.automind.empathy.rule" element1="/src&lt;cl.automind.empathy{DataRuleMediator.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1317266583143" units="1" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.AIndicator.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{AIndicator.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266881686" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataComparer.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{DataComparer.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266886562" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataConstrain.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{DataConstrain.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266888034" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataField.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{DataField.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266891670" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.DataFieldType.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{DataFieldType.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266893060" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.data.QueryConstrain.java&apos;" description="Delete element" element1="/src&lt;cl.automind.empathy.data{QueryConstrain.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1317266896188" subPackages="false" version="1.0"/>&#x0A;<refactoring abstract="true" comment="Extract interface &apos;cl.automind.empathy.rule.IRule&apos; from &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.rule.AbstractRule&apos;&#x0D;&#x0A;- Extracted interface: &apos;cl.automind.empathy.rule.IRule&apos;&#x0D;&#x0A;- Extracted members:&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.NON_EXECUTABLE&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getName()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getStrategies()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.hasStrategy(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.evaluateImpl()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.evaluate(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.canEvaluate(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.isSelectable()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getMessage()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.setMessage(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getValuesMap()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.clearValues()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.putValue(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.removeValue(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.setDataMediator(...)&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getDataMediator()&#x0D;&#x0A;     cl.automind.empathy.rule.AbstractRule.getValue()&#x0D;&#x0A;- Use super type where possible" comments="true" description="Extract interface &apos;IRule&apos;" element1="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule^NON_EXECUTABLE" element10="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~setMessage~QAbstractMessage;" element11="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getValuesMap" element12="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~clearValues" element13="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~putValue~QString;~QObject;" element14="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~removeValue~QString;" element15="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~setDataMediator~QDataRuleMediator;" element16="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getDataMediator" element17="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getValue" element2="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getName" element3="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getStrategies" element4="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~hasStrategy~QString;" element5="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~evaluateImpl" element6="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~evaluate~\[QObject;" element7="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~canEvaluate~\[QObject;" element8="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~isSelectable" element9="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule~getMessage" flags="589830" id="org.eclipse.jdt.ui.extract.interface" input="/src&lt;cl.automind.empathy.rule{AbstractRule.java[AbstractRule" instanceof="false" name="IRule" public="true" replace="true" stamp="1317268502552" version="1.0"/>&#x0A;<refactoring abstract="true" comment="Extract interface &apos;cl.automind.empathy.ui.IUiManager&apos; from &apos;cl.automind.empathy.ui.AbstractUiManager&apos;&#x0D;&#x0A;- Original project: &apos;EmpathicCore&apos;&#x0D;&#x0A;- Original element: &apos;cl.automind.empathy.ui.AbstractUiManager&apos;&#x0D;&#x0A;- Extracted interface: &apos;cl.automind.empathy.ui.IUiManager&apos;&#x0D;&#x0A;- Extracted members:&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.displayMessage(...)&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.hideCurrentMessage()&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.registerEmotion(...)&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.getEmotion(...)&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.getAllEmotionnames()&#x0D;&#x0A;     cl.automind.empathy.ui.AbstractUiManager.printElements()&#x0D;&#x0A;- Use super type where possible" comments="true" description="Extract interface &apos;IUiManager&apos;" element1="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~displayMessage~QAbstractMessage;" element2="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~hideCurrentMessage" element3="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~registerEmotion~QString;~QAbstractEmotion;" element4="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~getEmotion~QString;" element5="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~getAllEmotionnames" element6="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager~printElements" flags="589830" id="org.eclipse.jdt.ui.extract.interface" input="/src&lt;cl.automind.empathy.ui{AbstractUiManager.java[AbstractUiManager" instanceof="false" name="IUiManager" public="true" replace="true" stamp="1317355348504" version="1.0"/>
</session>