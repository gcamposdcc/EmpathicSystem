package cl.automind.vote.empathy;

import gcampos.dev.util.NamedValuePair;

import java.util.List;

import cl.automind.empathy.data.DefaultQueryCriterion;
import cl.automind.empathy.data.IQueryCriterion;
import cl.automind.empathy.data.QueryOption;
import cl.automind.empathy.data.sql.Sql;
import cl.automind.empathy.feedback.AbstractMessage;
import cl.automind.empathy.rule.AbstractRule;
import cl.automind.empathy.rule.RuleMetadata;
import cl.automind.sagde.model.SagdeMetadata;
import cl.automind.vote.model.Score;

@RuleMetadata(minVal = 0, maxVal = 1.0, threshold = 0.2, name = EmpathicConstants.R_CMO_PERFORMANCE)
public class CmoPerformanceRule extends AbstractRule {
	private static final String PERFORMANCE = "performance";
	private static final String CMO = "cmoName";
	private static final IQueryCriterion<Score> filter = new ScoreByIdCmoCriterion();
	public CmoPerformanceRule(){
		super();
		setMessage(new CmoPerformanceRuleMessage());
		setParams(
			new NamedValuePair<String>("idcmo","id"),
			new NamedValuePair<Integer>("idestablishment", 0),
			new NamedValuePair<String>("user", "rut"),
			new NamedValuePair<String>("namecmo", "name")
		);
	}
	@SuppressWarnings("unchecked")
	@Override
	public boolean canEvaluate(Object... params) {
		return getInSource(EmpathicConstants.DS_SCORES, QueryOption.Filter, filter).size() > 2;
	}

	@SuppressWarnings("unchecked")
	@Override
	public double evaluateImpl(Object... params) {
		int total = 0;
		int ok = 0;
		int idcmo = Integer.parseInt(((NamedValuePair<String>) params[0]).getValue());
		filter.setParams(Sql.pair("idcmo", idcmo));
		System.out.println("idcmo::"+ idcmo);
		List<Score> scores = getInSource(EmpathicConstants.DS_SCORES, QueryOption.Filter, filter);
		total = scores.size();
		SagdeMetadata metadata = new SagdeMetadata();
		for (Score score: scores){
			ok += score.getValue();
			metadata = score.getSagdeMetadata();
		}
		double rate = (ok + 0.0)/total;
		int performance = (int)((rate*100.0));
		putValue(PERFORMANCE, performance);
		try{
			NamedValuePair<String> namecmo = (NamedValuePair<String>) params[3];
			System.out.println("Rule:"+getName()+"::NameCmo:" + namecmo.getValue());
			putValue(CMO, namecmo.getValue());
		} catch (Exception e){
			putValue(CMO, "un cmo");
		}
		getMessage().getContext().getData().clear();
		getMessage().getContext().getData().add(metadata);
		return total > 0 ? rate : 0;
	}
	public class CmoPerformanceRuleMessage extends AbstractMessage{
		@Override
		public String getName() {
			return "mCmoPerformance00";
		}
		@Override
		public String getEmotionName() {
			return "happiness";
		}
		@Override
		public String getUnfilteredText() {
			return "Llevas un "+key(PERFORMANCE)+" % de rendimiento en "+key(CMO)+"!!!";
		}
	}
}
