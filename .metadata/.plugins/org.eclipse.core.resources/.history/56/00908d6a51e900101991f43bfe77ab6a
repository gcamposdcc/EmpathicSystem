package cl.automind.empathy.fw.data;

import java.util.Hashtable;
import java.util.Map;

import cl.automind.empathy.data.AbstractDataManager;
import cl.automind.empathy.data.IDataSource;

import patterns.creational.FlyweightNamedFactory;

public class DefaultDataManager extends AbstractDataManager{
	
	private final FlyweightNamedFactory<IDataSource> DataSources;
	public DefaultDataManager(){
		DataSources = new FlyweightNamedFactory<IDataSource>() {
			@Override
			public Map<String, IDataSource> initializeMap() {
				return new Hashtable<String, IDataSource>();
			}
		};
	}
	@Override
	public boolean createSpaceIfNotFound() {
		return true;
	}
	@Override
	public IDataSource getDataSource(String DataSourceName) {
		IDataSource space = DataSources.createElement(DataSourceName);
		if (space == null && createSpaceIfNotFound()){
			space = new InternalDataSource(true);
			DataSources.registerElement(DataSourceName, space);
		}
		return space;
	}
	
	@Override
	public void onSuscription(IDataSource data) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onNew(IDataSource data) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onCompletition() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public boolean registerDataSource(String DataSourceName, IDataSource DataSource) {
		if (!DataSources.elementRegistered(DataSourceName)){
			DataSources.registerElement(DataSourceName, DataSource);
			return true;
		}
		return false;
	}

}
