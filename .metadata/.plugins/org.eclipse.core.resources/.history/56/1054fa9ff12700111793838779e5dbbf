package cl.automind.vote.empathy;

import gcampos.dev.util.NamedValuePair;

import java.util.List;

import cl.automind.empathy.data.DefaultQueryCriterion;
import cl.automind.empathy.data.IQueryCriterion;
import cl.automind.empathy.data.QueryOption;
import cl.automind.empathy.feedback.AbstractMessage;
import cl.automind.empathy.rule.AbstractRule;
import cl.automind.empathy.rule.RuleMetadata;
import cl.automind.sagde.model.SagdeMetadata;
import cl.automind.vote.model.Score;
import cl.automind.vote.model.UserInfo;

@RuleMetadata(name = EmpathicConstants.R_ABOVE_AVERAGE)
public class AboveAverageRule extends AbstractRule {

	public AboveAverageRule(){
		super();
		setMessage(new Message());
	}
	@Override
	public boolean canEvaluate(Object... params) {
		return countAllInSource(EmpathicConstants.DS_SCORES) > 1;
	}

	@Override
	public double evaluateImpl(Object... params) {
		int total = 0;
		List<Score> scores =
			getAllInSource(EmpathicConstants.DS_SCORES, EmpathicConstants.TP_SCORE);
		Score lastScore = scores.get(scores.size() - 1);

		List<UserInfo> users =
			getAllInSource(EmpathicConstants.DS_USER_INFO, EmpathicConstants.TP_USER_INFO);
		UserInfo user = users.get(0);

		int idInstance = lastScore.getIdInstance();
		int idQuestion = lastScore.getIdQuestion();
		int idCmo = lastScore.getSagdeMetadata().getIdCmo();
		String nameCmo = lastScore.getCmoName();

		IQueryCriterion<Boolean> filterUser =
			new DefaultQueryCriterion<Boolean>
				(true,
					(NamedValuePair<String>) params[0],
					(NamedValuePair<String>) params[1],
					(NamedValuePair<String>) params[2]
				);

		SagdeMetadata metadata = new SagdeMetadata();
		for (Score score: scores){
			total += score.getValue();
			metadata = score.getSagdeMetadata();
		}

		List<Boolean> aboveAverage = getInSource(EmpathicConstants.DS_ABOVE_AVERAGE, QueryOption.Filter, filterUser);

		boolean above = true;
		putValue("score", total);
		getMessage().getContext().getData().clear();
		getMessage().getContext().getData().add(metadata);
		return above ? 1.0 : 0.0;
	}

	@Override
	public AbstractMessage getMessage() {
		return super.getMessage();
	}
	protected Mode getMode(){
		return Mode.QuestionOnly;
	}
	private enum Mode { QuestionOnly, Session, CmoOnly }
	public class Message extends AbstractMessage{

		@Override
		public String getName() {
			return "mAboveAverage00";
		}

		@Override
		public String getEmotionName() {
			return "happiness";
		}

		@Override
		public String getUnfilteredText() {
			switch (getMode()){
			case QuestionOnly:
				return "";
			case Session:
				return "";
			case CmoOnly:
				return "";
			default:
				return "";
			}
		}
	}
}
