package cl.automind.empathy.ui;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;

import patterns.creational.FlyweightNamedFactory;
import cl.automind.empathy.feedback.AbstractEmotion;
import cl.automind.empathy.feedback.AbstractMessage;
import cl.automind.empathy.rule.AbstractRule;

public abstract class AbstractUiManager {
	public abstract void displayMessage(AbstractMessage message);
	public abstract void hideCurrentMessage();
	
	protected class EmpathicEmotionFactory extends FlyweightNamedFactory<AbstractEmotion>{
		
		@Override
		public Map<String, AbstractEmotion> initializeMap() {
			return new Hashtable<String, AbstractEmotion>();
		}
		public Collection<AbstractEmotion> getEmotionsByFamily(String strategyName){
			Collection<AbstractEmotion> emotions = getRegistry().values();
			Collection<AbstractEmotion> selectedEmotions = new ArrayList<AbstractEmotion>();
			for (AbstractEmotion emotion : emotions){
				if (emotion.hasFamily(strategyName)) {
					selectedEmotions.add(emotion);
				}
			}
			return selectedEmotions;
		}
		public Set<String> getAllEmotionnames(){
			return getRegistry().keySet();
		}
	}
}
