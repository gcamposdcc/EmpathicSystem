package cl.automind.vote.command;

import cl.automind.vote.command.socket.SocketLoginCommand;
import cl.automind.vote.command.socket.SocketRequestPollCommand;
import cl.automind.vote.command.socket.SocketVoteCastCommand;
import patterns.behavioral.ICommand;
import patterns.creational.IFactory;

public class PollCommandFactory {

	@Override
	public ICommand CreateElement(PollCommands... param) {
		PollCommands comm = param[0];
		switch(comm){
		case Login:
			return new SocketLoginCommand();
		case RequestPoll:
			return new SocketRequestPollCommand();
		case Vote:
			return new SocketVoteCastCommand();
		}
		return null;
	}

	@Override
	public <TI extends PollCommands> ICommand createElement(TI param) {
		switch(param){
		case Login:
			return new SocketLoginCommand();
		case RequestPoll:
			return new SocketRequestPollCommand();
		case Vote:
			return new SocketVoteCastCommand();
		}
		return null;
	}

}
