package cl.automind.empathy.automind;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import lombok.Data;

import cl.automind.empathy.data.IData;

public class @Data SagdeMetadata implements IData{
	
	private final int idSector;
	private final int idAxis;
	private final int idCMO;
	private final int idKO;
	public SagdeMetadata(int sector, int axis, int cmo, int ko){
		this.idSector = sector;
		this.idAxis = axis;
		this.idCMO = cmo;
		this.idKO = ko;
	}
	public int getIdSector(){
		return this.idSector;
	}
	public int getIdAxis(){
		return this.idAxis;
	}
	public int getIdCmo(){
		return this.idCMO;
	}
	public int getIdKo(){
		return this.idKO;
	}
	@Override
	public boolean like(IData template) {
		if(template instanceof SagdeMetadata){
			SagdeMetadata meta = (SagdeMetadata)template;
			return getIdSector() == meta.getIdSector()
				&& getIdAxis() == meta.getIdAxis()
				&& getIdCmo() == meta.getIdCmo()
				&& getIdKo() == meta.getIdKo();
		}
		return false;
	}
	@Override
	public boolean like(IData template, String field) {
		if(template instanceof SagdeMetadata) {
			try {
				String method = "";
				if (field.length() > 1){
					method = "get"+field.substring(0,1).toUpperCase()+field.substring(1);
				}
				else{
					method = "get"+field.substring(0,1).toUpperCase();
				}
				Method m = getClass().getDeclaredMethod(method, new Class[]{});
				m.invoke(new Object(), new Object[]{});
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return false;
	}
	@Override
	public boolean like(IData template, String... fields) {
		for(String field: fields){
			if(!like(template, field)) return false;
		}
		return true;
	}
	@Override
	public <T> boolean valueOfField(String field, T value) {
		// TODO Auto-generated method stub
		return false;
	}
}
