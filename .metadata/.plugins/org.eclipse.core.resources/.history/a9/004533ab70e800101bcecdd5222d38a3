package cl.automind.empathy.annotation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;

public class DataProcessor extends AbstractProcessor {

	@Override
	public Set<String> getSupportedAnnotationTypes() {
		Set<String> types = new HashSet<String>();
		types.add(Data.class.getCanonicalName());
		return types;
	}

	@Override
	public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
		//processingEnv is a predefined member in AbstractProcessor class
		//Messager allows the processor to output messages to the environment
		Messager messager = processingEnv.getMessager();

		//Create a hash table to hold the option switch to option bean mapping
		HashMap<String, String> values = new HashMap<String, String>();

		//Loop through the annotations that we are going to process
		//In this case there should only be one: Option
		for (TypeElement te: elements) {

			//Get the members that are annotated with Option
			for (Element e: env.getElementsAnnotatedWith(te))
				//Process the members. processAnnotation is our own method
				processAnnotation(e, values, messager);
		}

		//If there are any annotations, we will proceed to generate the annotation
		//processor in generateOptionProcessor method
		if (values.size() > 0)
			try {
				//Generate the option process class
				generateOptionProcessor(processingEnv.getFiler(), values);
			} catch (Exception e) {
				messager.printMessage(Diagnostic.Kind.ERROR, e.getMessage());
			}

			return (true);
	}

	private void processAnnotation(Element e, HashMap<String, String> values, Messager messager) {
		// TODO Auto-generated method stub

	}

}
