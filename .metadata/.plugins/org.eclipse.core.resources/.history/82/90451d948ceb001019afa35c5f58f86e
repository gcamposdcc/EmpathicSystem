package cl.automind.vote.android.view;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.logging.Logger;

import patterns.behavioral.IObserver;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import cl.automind.android.vote.R;
import cl.automind.vote.android.application.AppContext;
import cl.automind.vote.android.utils.RutValidator;
import cl.automind.vote.command.LoginCommand;
import cl.automind.vote.controller.LoginController;
import cl.automind.vote.values.NetworkConstants;
import cl.automind.vote.values.StringConstants;

public class Startup extends Activity {
	public int getLayoutId() {
		return AppContext.InitialState;
	}
	@Override
	public void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(getLayoutId());
	}
	@Override
	public void setContentView(int layoutResID){
		super.setContentView(layoutResID);
		setAsCurrentActivity();
	}
	protected void setAsCurrentActivity() {
		AppContext.getInstance().setState(getLayoutId());
//		AppContext.getInstance().setActivity(this);
	}
	public void actionButton(View view){
		if (AppContext.getInstance().getState() == AppContext.InitialState){
			EditText text_input;
			String keyCode = "";
			setEmptyAsZero();
			text_input = (EditText)findViewById(R.id.CodeInput00);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput01);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput02);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput03);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput04);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput05);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)findViewById(R.id.CodeInput06);
			keyCode = keyCode + text_input.getText();
			text_input = (EditText)this.findViewById(R.id.RutInputTextField);

			AppContext.getInstance().setKeyCode(keyCode);
			AppContext.getInstance().setRut(text_input.getText().toString());

			if (RutValidator.validateRut(AppContext.getInstance().getRut())) {
				new LoginThread().execute((Button)view);
			} else {
				cleanTextField(text_input);
			}
		}
	}
	public void cleanTextField(View view){
		EditText text_input = (EditText)this.findViewById(R.id.RutInputTextField);
		text_input.setText("");
	}
	private void setEmptyAsZero(){
		EditText text_input;
		text_input = (EditText)findViewById(R.id.CodeInput00);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput01);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput02);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput03);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput04);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput05);
		if (text_input.getText().length() == 0) text_input.setText("0");
		text_input = (EditText)findViewById(R.id.CodeInput06);
		if (text_input.getText().length() == 0) text_input.setText("0");
	}

	private void enableButtons(boolean enable){
		findViewById(R.id.RunInputButton).setEnabled(enable);
	}
	private void clearColors() {
		findViewById(R.id.RunInputButton).invalidateDrawable(findViewById(R.id.RunInputButton).getBackground());
		findViewById(R.id.RunInputButton).getBackground().clearColorFilter();
	}

	private void goVote(){
        Intent myIntent = new Intent(findViewById(R.id.RunInputButton).getContext(), Vote.class);
        startActivity(myIntent);
        finish();
	}

	class LoginThread extends AsyncTask<Button, Object, Button> implements IObserver<String>{
		private boolean successfulLogin = false;
		@Override protected void onPreExecute(){
			enableButtons(false);
		}
		Button btn;
		@Override protected Button doInBackground(Button... params) {
			btn = params[0];
			try {
				LoginController controller = new LoginController();
				controller.suscribe(this);
				controller.executeTask(LoginCommand.class, new Object[]{ AppContext.getInstance().getKeyCode(), AppContext.getInstance().getRut() });
			} catch (Exception e) {
				Logger.global.warning("Catastrophical error!");
				Writer result = new StringWriter();
				PrintWriter pw = new PrintWriter(result);
				e.printStackTrace(pw);
				publishProgress(
					new Object[]{
						btn, new Boolean(false),
						"CatastrophicalError::" + e.getMessage() + "::" + result.toString()
					}
				);
				try {
					pw.close();
					result.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			return btn;
		}
		@Override protected void onProgressUpdate(Object... params){
			Button button = (Button) params[0];
			Boolean success = (Boolean) params[1];
			String message = (String) params[2];
			enableButtons(true);
			Drawable d = button.getBackground();
			((TextView)findViewById(R.id.RunInputFeedback)).setText(message);
			successfulLogin = success.booleanValue();
			PorterDuffColorFilter filter = new PorterDuffColorFilter(successfulLogin ? Color.GREEN : Color.RED, PorterDuff.Mode.SRC_ATOP);
			d.setColorFilter(filter);
		}
		@Override protected void onPostExecute(Button in){
			if (successfulLogin) goVote();
			new StartupClearColorThread().execute(in);
		}
		@Override
		public void onSuscription(String data) { }
		@Override
		public void onNew(String data) {
			boolean success = data.startsWith(NetworkConstants.SUCCESS+"");
			String newMess = "";
			if (data.length() > 0){
				if (data.charAt(0) == NetworkConstants.SUCCESS){
					newMess = StringConstants.LOGIN_ACCEPTED;
				} else if (data.charAt(0) == NetworkConstants.FAIL){
					if(data.length() > 1){
						if (data.charAt(1) == NetworkConstants.FAIL){
							newMess = StringConstants.LOGIN_UNREACHABLE;
						} else{
							newMess = StringConstants.LOGIN_REJECTED;
						}
					}else{
						newMess = StringConstants.LOGIN_REJECTED;
					}
				}
			}
			publishProgress(new Object[]{btn, new Boolean(success), newMess});
		}
		@Override
		public void onCompletition() { }
	}
	class StartupClearColorThread extends AsyncTask<Button, Object, Button>{
		@Override protected void onPreExecute(){

		}
		@Override protected Button doInBackground(Button... params) {
			Button btn = params[0];
			return btn;
		}
		@Override protected void onProgressUpdate(Object... params){

		}
		@Override protected void onPostExecute(Button in){
			SystemClock.sleep(2000);
			clearColors();
			enableButtons(true);
		}
	}
}