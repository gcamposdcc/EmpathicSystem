package cl.automind.vote.desk.controller;

import interfaces.behavioral.IController;
import interfaces.behavioral.IDisposable;

import java.util.ArrayList;
import java.util.List;

import patterns.behavioral.IObservable;
import patterns.behavioral.IObserver;
import cl.automind.vote.command.PollCommandFactory;
import cl.automind.vote.command.PollCommands;
import cl.automind.vote.command.VoteCastCommand;

public class VoteCastController implements IController<VoteCastCommand>, IObservable<String>, IObserver<String>{
	private VoteCastCommand voteCommand;

	public VoteCastController(){
		setObservers(new ArrayList<IObserver<String>>());
		setCommand((VoteCastCommand)(new PollCommandFactory()).createElement(PollCommands.Vote));
	}

	@Override
	public void setCommand(VoteCastCommand voteCommand) {
		this.voteCommand = voteCommand;
	}

	@Override
	public VoteCastCommand getCommand() {
		return voteCommand;
	}

	@Override
	public void executeTask(Class<? extends VoteCastCommand> commandType, Object... params) {
		if (getCommand().canExecute(params)) {
			getCommand().suscribe(this);
			getCommand().execute(params);
		}
	}

	@Override
	public void onSuscription(String data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onNew(String data) {
		update(data);
	}

	@Override
	public void onCompletition() {
		getCommand().unsuscribe(this);
	}

	@Override
	public void update(String value) {
		System.out.println("VoteCastController::NotifyObservers");
		for(IObserver<String> observer: getObservers()){
			observer.onNew(value);
		}
	}

	List<IObserver<String>> observers;
	@Override
	public IDisposable suscribe(IObserver<String> observer) {
		// TODO Auto-generated method stub
		if(!getObservers().contains(observer)) {
			getObservers().add(observer);
			observer.onSuscription("");
		}
		return null;
	}

	@Override
	public void unsuscribe(IObserver<String> observer) {
		getObservers().remove(observer);
		observer.onCompletition();
	}

	protected void setObservers(List<IObserver<String>> observers) {
		this.observers = observers;
	}

	public List<IObserver<String>> getObservers() {
		return observers;
	}

}
