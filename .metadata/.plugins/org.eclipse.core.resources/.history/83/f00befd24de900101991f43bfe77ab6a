package cl.automind.empathy.fw.data;

import interfaces.behavioral.IDisposable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import patterns.behavioral.IObserver;
import cl.automind.empathy.data.DataEntry;
import cl.automind.empathy.data.IData;
import cl.automind.empathy.data.IDataSource;

public class InternalDataSource<T> implements IDataSource<T> {
	private List<IObserver<IDataSource<T>>> observers;
	private final Map<Integer, DataEntry> data;
	private String name;
	private static int code = 0;
	private int id = 0;
	private final boolean useBackup;
	public InternalDataSource(boolean useBackup){
		this.data = initiateMap();
		setObservers(new Vector<IObserver<IDataSource<T>>>());
		this.name = "" + (code++);
		this.useBackup = useBackup;
	}
	private Map<Integer, DataEntry> initiateMap(){
		return new Hashtable<Integer, DataEntry>();
	}
	public void setObservers(List<IObserver<IDataSource<T>>> observers) {
		this.observers = observers;
	}
	public List<IObserver<IDataSource<T>>> getObservers() {
		return observers;
	}
	protected Map<Integer, DataEntry> getData(){
		return data;
	}
	private synchronized int nextId() {
		this.id++;
		return id;
	}
	@Override
	public void update(IDataSource<T> value) {
		for(IObserver<IDataSource<T>> observer: getObservers()){
			observer.onNew(value);
		}
	}
	@Override
	public IDisposable suscribe(IObserver<IDataSource<T>> observer) {
		if (getObservers().contains(observer))return null;
		else {
			getObservers().add(observer);
			//TODO implement IDisposable
			return null;
		}
	}
	@Override
	public void unsuscribe(IObserver<IDataSource<T>> observer) {
		getObservers().remove(observer);
	}
	@Override
	public String getName() {
		return name;
	}
	@Override
	public synchronized int insert(IData value) {
		int id = nextId();
		getData().put(id, new InternalDataEntry(id, value, useBackup));
		return id;
	}
	@Override
	public List<Integer> insert(Collection<IData> value) {
		List<Integer> ids = new ArrayList<Integer>();
		int id;
		for(IData val: value){
			id = nextId();
			getData().put(id, new InternalDataEntry(getData().size(), val, useBackup));
			ids.add(id - 1);
		}
		return ids;
	}
	@Override
	public IData selectById(int id) {
		DataEntry d = getData().get(id);
		return d != null ? d.getValue() : DataEntry.Null.getValue();
	}
	@Override
	public Collection<IData> selectLike(IData template) {
		Collection<IData> likes = new ArrayList<IData>();
		for(DataEntry t : getData().values()){
			//FIXME
//			if(t.getValue().like(template)){
//				likes.add(t.getValue());
//			}
		}
		return likes;
	}
	@Override
	public Collection<IData> selectLike(IData template, String... fields) {
		Collection<IData> likes = new ArrayList<IData>();
		for(DataEntry t : getData().values()){
			// FIXME
//			if(t.getValue().like(template, fields)){
//				likes.add(t.getValue());
//			}
		}
		return likes;
	}
	@Override
	public Collection<IData> selectAll() {
		Collection<IData> col = new ArrayList<IData>();
		for(DataEntry t : getData().values()){
			col.add(t.getValue());
		}
		return col;
	}
	@Override
	public int updateById(int id, IData value) {
		DataEntry item = getData().get(id);
		return item != null ? item.setValue(value) : -1;
	}
	@Override
	public Collection<Integer> updateLike(IData template, IData value) {
		Collection<Integer> ids = new ArrayList<Integer>();
		for (DataEntry de: getData().values()){
			if (de != null){
				//FIXME
//				if (de.getValue().like(template)) {
//					ids.add(de.getId());
//					de.setValue(value);
//				}
			}
		}
		return ids;
	}
	@Override
	public Collection<Integer> updateLike(IData template, IData value, String[] fields) {
		Collection<Integer> ids = new ArrayList<Integer>();
		for (DataEntry de: getData().values()){
			if (de != null){
				//FIXME
//				if (de.getValue().like(template, fields)) {
//					ids.add(de.getId());
//					de.setValue(value);
//				}
			}
		}
		return ids;
	}
	@Override
	public boolean deleteById(int id) {
		if (!validId(id)) return false;
		getData().remove(id);
		return true;
	}
	@Override
	public boolean deleteLike(IData template) {
		Collection<Integer> ids = new ArrayList<Integer>();
		for (DataEntry de: getData().values()){
			if (de != null){
				//FIXME
//				if (de.getValue().like(template)) {
//					ids.add(de.getId());
//				}
			}
		}
		for (int id: ids){
			getData().remove(id);
		}
		return ids.size() > 0;
	}
	@Override
	public void clear() {
		getData().clear();
	}
	@Override
	public boolean validId(int id) {
		return getData().containsKey(id);
	}
}
