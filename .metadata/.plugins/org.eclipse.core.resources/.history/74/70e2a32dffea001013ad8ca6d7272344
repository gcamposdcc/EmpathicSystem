package cl.automind.android.view;

import java.util.logging.Logger;

import patterns.behavioral.IObserver;
import android.app.Activity;
import android.content.Context;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.format.Formatter;
import android.widget.TextView;
import cl.automind.android.application.AppContext;
import cl.automind.android.utils.ExportableObject;
import cl.automind.android.vote.R;
import cl.automind.vote.command.RequestPollCommand;
import cl.automind.vote.connectivity.Client;
import cl.automind.vote.controller.RequestPollController;
import cl.automind.vote.values.NetworkConstants;
import cl.automind.vote.values.StringConstants;

public class Choices extends Activity {
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(AppContext.ChoicesState);
		new RequestChoicesThread().execute(this);
	}
	@Override
	public void setContentView(int layoutResID){
		super.setContentView(layoutResID);
		AppContext.getInstance().setState(layoutResID);
	}
	class RequestChoicesThread extends AsyncTask<Object, Object, Object> implements IObserver<String>{
		@Override protected void onPreExecute(){
		}
		@Override protected Object doInBackground(Object... params) {
			try {
				String ipLocal = "127.0.0.1";
				try{
					WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);
					WifiInfo wifiInfo = wifiManager.getConnectionInfo();
					int ipAddress = wifiInfo.getIpAddress();
					ipLocal = Formatter.formatIpAddress(ipAddress);
				} catch (Exception e){ }
				ExportableObject vote = new ExportableObject();
				vote.set(ExportableObject.REQ_CHOICES, ""+AppContext.getInstance().getQuestionId());
				String resp = Client.getClient(ipLocal, NetworkConstants.QUESTION_PORT).exportObject(vote);
//				boolean success = resp.startsWith(Client.SUCCESS);
				String[] split = resp.split("---");
				String head = "";
				String tail = "";
				if (split.length == 0){
					head = "SD";
					tail = "";
				}
				if (split.length == 1){
					head = "SD";
					tail = "";
				}
				if (split.length == 2){
					head = split[0];
					tail = split[1];
				}
				RequestPollController controller = new RequestPollController();
				controller.suscribe(this);
				controller.executeTask(RequestPollCommand.class, params);
			} catch (Exception e) {
				Logger.global.warning("Catastrophical error!");
			}
			return null;
		}
		@Override protected void onProgressUpdate(Object... params){
			String instruction = (String) params[0];
			String message = (String) params[1];

			if (instruction.startsWith("SD")) return;
			String[] texts = message.split("&&");
			int count = 0;
			((TextView)findViewById(R.id.questionHeader))
				.setText(texts.length > count ? texts[count] : "Texto Pregunta"); count++;
			((TextView)findViewById(R.id.questionChoice00))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
			((TextView)findViewById(R.id.questionChoice01))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
			((TextView)findViewById(R.id.questionChoice02))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
			((TextView)findViewById(R.id.questionChoice03))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
			((TextView)findViewById(R.id.questionChoice04))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
			((TextView)findViewById(R.id.questionChoice05))
				.setText(texts.length > count ? texts[count] : "Texto Alternativa"); count++;
		}
		@Override protected void onPostExecute(Object in){
		}
		@Override
		public void onSuscription(String data) {
			// TODO Auto-generated method stub

		}
		@Override
		public void onNew(String data) {
			String[] pollTexts = data.split("&&");
			if (pollTexts.length > 1){
				AppContext.getInstance().setPollId(
					Integer.parseInt(pollTexts[0].substring(2,pollTexts[0].indexOf("--")))
				);
				setPollInfo(
					StringConstants.POLL_PEOPLE_POLLED + " " +
					pollTexts[0].substring(pollTexts[0].indexOf("--") + 2,pollTexts[0].indexOf("---")) + " " +
					StringConstants.PEOPLE
				);
			} else {
				if(getMessage().startsWith(""+NetworkConstants.FAIL+NetworkConstants.FAIL)){

				} else
				if(getMessage().startsWith(""+NetworkConstants.FAIL)){
					setPollInfo(StringConstants.VOTE_NULL);
				} else
				if(getMessage().startsWith(""+NetworkConstants.FAIL_NULL)){
					setPollInfo(StringConstants.VOTE_NULL);
				} else
				if(getMessage().startsWith(""+NetworkConstants.SUCCESS+NetworkConstants.FAIL_DUPLICATE)){
					setPollInfo(
						StringConstants.POLL_PEOPLE_POLLED + " " +
						pollTexts[0].substring(2) + " " +
						StringConstants.PEOPLE
					);
				}
			}
			publishProgress(new Object[]{head, tail});
		}
		@Override
		public void onCompletition() {
			// TODO Auto-generated method stub

		}
	}
}