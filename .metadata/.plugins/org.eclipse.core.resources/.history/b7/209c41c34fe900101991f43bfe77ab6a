package cl.automind.empathy.data;

import java.util.Collection;

import interfaces.behavioral.IDisposable;
import patterns.behavioral.IObserver;



public abstract class AbstractDataManager implements IDataSourceObserver{
	/// ABSTRACT METHODS
	public abstract IDataSource<T> getDataSource(String dataSourceName, T template);
	public abstract boolean registerDataSource(String DataSource, IDataSource dataSource);
	public abstract boolean createSpaceIfNotFound();
	
	protected <T> IDisposable suscribeDataSourceObserver(String dataSourceName, IObserver<IDataSource> observer){
		IDataSource dataSource = getDataSource(dataSourceName);
		if (dataSource == null) return null;
		return dataSource.suscribe(observer);
	}
	
	protected <T> int pushValue(String dataSourceName, IData value){
		return getDataSource(dataSourceName).insert(value);
	}
	protected <T> int updateValue(String dataSourceName, int id, IData value){
		return getDataSource(dataSourceName).updateById(id, value);
	}
	
	public Object getValueById(String dataSourceName, int id){
		return getDataSource(dataSourceName).selectById(id);
	}
	public Collection<IData> getAll(String dataSourceName){
		return getDataSource(dataSourceName).selectAll();
	}
	public <T> Object getValueLike(String dataSourceName, IData template){
		return getDataSource(dataSourceName).selectLike(template);
	}
	
}
