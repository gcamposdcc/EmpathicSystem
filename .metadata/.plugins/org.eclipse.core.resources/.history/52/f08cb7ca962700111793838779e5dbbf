package cl.automind.vote.empathy;

import java.util.Collection;

import cl.automind.empathy.feedback.AbstractMessage;
import cl.automind.empathy.rule.AbstractRule;
import cl.automind.empathy.rule.RuleMetadata;
import cl.automind.sagde.model.SagdeMetadata;
import cl.automind.vote.model.Score;

@RuleMetadata(minVal = 0, maxVal = 10, threshold = 2, name = "")
public class AboveAveragePerformanceRule extends AbstractRule {

	public AboveAveragePerformanceRule(){
		super();
		setMessage(new TotalScoreRuleMessage());
	}
	@Override
	public boolean canEvaluate(Object... params) {
		return countAllInSource(EmpathicConstants.DS_SCORES) > 1;
	}

	@Override
	public double evaluateImpl(Object... params) {
		int total = 0;
		Collection<Score> scores =
			getAllInSource(
					EmpathicConstants.DS_SCORES,
					EmpathicConstants.TP_SCORE);
		SagdeMetadata metadata = new SagdeMetadata();
		for (Score score: scores){
			total += score.getValue();
			metadata = score.getSagdeMetadata();
		}
		putValue("score", total);
		getMessage().getContext().getData().clear();
		getMessage().getContext().getData().add(metadata);
		return total;
	}

	@Override
	public AbstractMessage getMessage() {
		return super.getMessage();
	}

	public class TotalScoreRuleMessage extends AbstractMessage{

		@Override
		public String getName() {
			return "mTotalScore00";
		}

		@Override
		public String getEmotionName() {
			return "happiness";
		}

		@Override
		public String getUnfilteredText() {
			return "Llevas @score puntos!!!";
		}
	}
}
