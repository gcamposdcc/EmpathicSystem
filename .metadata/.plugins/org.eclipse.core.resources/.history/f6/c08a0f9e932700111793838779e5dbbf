package cl.automind.vote.android.view;

import gcampos.dev.patterns.behavioral.IObserver;
import gcampos.dev.util.NamedValuePair;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import cl.automind.android.vote.R;
import cl.automind.vote.android.application.AppContext;
import cl.automind.vote.command.VoteCastCommand;
import cl.automind.vote.connectivity.NetMessage;
import cl.automind.vote.controller.VoteCastController;
import cl.automind.vote.empathy.EmpathicConstants;
import cl.automind.vote.empathy.EmpathyAsyncTask;
import cl.automind.vote.model.Score;
import cl.automind.vote.values.NetworkConstants;
import cl.automind.vote.values.StringConstants;

public class Vote extends Activity {
	public int getLayoutId() {
		return AppContext.VoteState;
	}
	protected void setAsCurrentActivity() {
		AppContext.getInstance().setState(getLayoutId());
		AppContext.getInstance().setActivity(this);
	}
	@Override
	public void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(getLayoutId());
		((TextView)findViewById(R.id.KeyCode)).setText("Presiona para votar");
	}
	@Override
	public void setContentView(int layoutResID){
		super.setContentView(layoutResID);
		setAsCurrentActivity();
	}
	@Override
	protected void onResume() {
		super.onResume();
		setAsCurrentActivity();
	}

	public void viewChoices(View view){
		Intent myIntent = new Intent(view.getContext(), Choices.class);
		startActivity(myIntent);
	}

	MediaPlayer mp;
	public void voteButton(View view){
		new CastVoteThread().execute((Button)view);
	}
	private void clearColors() {
		findViewById(R.id.click0).invalidateDrawable(findViewById(R.id.click0).getBackground());
		findViewById(R.id.click1).invalidateDrawable(findViewById(R.id.click1).getBackground());
		findViewById(R.id.click2).invalidateDrawable(findViewById(R.id.click2).getBackground());
		findViewById(R.id.click3).invalidateDrawable(findViewById(R.id.click3).getBackground());
		findViewById(R.id.click4).invalidateDrawable(findViewById(R.id.click4).getBackground());
		findViewById(R.id.click5).invalidateDrawable(findViewById(R.id.click5).getBackground());
		findViewById(R.id.click0).getBackground().clearColorFilter();
		findViewById(R.id.click1).getBackground().clearColorFilter();
		findViewById(R.id.click2).getBackground().clearColorFilter();
		findViewById(R.id.click3).getBackground().clearColorFilter();
		findViewById(R.id.click4).getBackground().clearColorFilter();
		findViewById(R.id.click5).getBackground().clearColorFilter();
	}
	private void enableButtons(boolean enable){
		findViewById(R.id.click0).setEnabled(enable);
		findViewById(R.id.click1).setEnabled(enable);
		findViewById(R.id.click2).setEnabled(enable);
		findViewById(R.id.click3).setEnabled(enable);
		findViewById(R.id.click4).setEnabled(enable);
		findViewById(R.id.click5).setEnabled(enable);
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event){
	    if (keyCode == KeyEvent.KEYCODE_BACK){
	        finish();
	    }
	    return super.onKeyDown(keyCode, event);
	}
	private static int voteCount= 0;
	class CastVoteThread extends AsyncTask<Button, Object, Button> implements IObserver<NetMessage>{
		@Override protected void onPreExecute(){
			clearColors();
			enableButtons(false);
		}
		private Button btn;
		@Override protected Button doInBackground(Button... params) {
			btn = params[0];
			try {
				VoteCastController controller = new VoteCastController();
				controller.suscribe(this);
				controller.executeTask(VoteCastCommand.class, new Object[]{ AppContext.getInstance().getKeyCode(), AppContext.getInstance().getRut(), ""+btn.getText().charAt(0)});
			} catch (Exception e) {
				publishProgress(new Object[]{btn, false, StringConstants.VOTE_FAILURE, false});
			}
			return btn;
		}
		@Override protected void onProgressUpdate(Object... params){
			Button button = (Button) params[0];
			Boolean success = (Boolean) params[1];
			String message = (String) params[2];
			Boolean correct = (Boolean) params[3];
			enableButtons(true);
			if (success){
				new EmpathyAsyncTask().execute();
			}
			Drawable d = button.getBackground();
			((TextView)findViewById(R.id.KeyCode)).setText(message);
			PorterDuffColorFilter filter =
				new PorterDuffColorFilter(success.booleanValue() ? (correct.booleanValue()? Color.BLUE: Color.GREEN) : Color.RED, PorterDuff.Mode.SRC_ATOP);
			d.setColorFilter(filter);
		}
		@Override protected void onPostExecute(Button in){
			new VoteClearColorThread().execute(in);
		}
		@Override
		public void onSuscription(NetMessage data) {
			// TODO Auto-generated method stub

		}
		@Override
		public void onNew(NetMessage data) {
			String newMess = "";
			boolean correct = false;
			String message = data.getSections().get(0).getParts().get(0);
			boolean success = message.startsWith(""+NetworkConstants.SUCCESS);
			if (success){
				newMess = StringConstants.VOTE_RECEIVED;
				try{
					String[] times = data.getSections().get(1).getParts().toArray(new String[data.getSections().get(1).getParts().size()]);
					newMess += " en " + times[0] + " mins, " + times[1] + " segs." ;
					correct = message.charAt(1) == NetworkConstants.VOTE_CORRECT;
					String[] sessionIds = data.getSections().get(2).getParts().toArray(new String[data.getSections().get(2).getParts().size()]);
					int idInstance = Integer.parseInt(sessionIds[0]);
					int idQuestion = Integer.parseInt(sessionIds[1]);

					int idSector, idAxis, idCmo, idKo, idLevel;
					idSector = idAxis = idCmo = idKo = idLevel = 0;
					String nameCmo = "Sin nombre";

					String[] sagdeIds = data.getSections().get(3).getParts().toArray(new String[data.getSections().get(3).getParts().size()]);
					idSector = Integer.parseInt(sagdeIds[0]);
					idAxis = Integer.parseInt(sagdeIds[1]);
					idCmo = Integer.parseInt(sagdeIds[2]);
					idKo = Integer.parseInt(sagdeIds[3]);
					idLevel = Integer.parseInt(sagdeIds[4]);
					nameCmo = sagdeIds[5];

					Score score = new Score(voteCount++,correct? 1: 0);

					score.setIdInstance(idInstance);
					score.setIdQuestion(idQuestion);

					score.getSagdeMetadata().setIdSector(idSector);
					score.getSagdeMetadata().setIdAxis(idAxis);
					score.getSagdeMetadata().setIdCmo(idCmo);
					score.getSagdeMetadata().setIdKo(idKo);
					score.getSagdeMetadata().setIdLevel(idLevel);

					score.setCmoName(nameCmo);
					AppContext.getInstance().getEmpathy().pushValue(EmpathicConstants.DS_SCORES, score);
					AppContext.getInstance().getEmpathy().putParams(EmpathicConstants.R_CMO_PERFORMANCE_INCREASE,
					(new NamedValuePair<String>("idcmo",""+idCmo)),
					(new NamedValuePair<Integer>("idestablishment", AppContext.getInstance().getEstablishmentId())),
					(new NamedValuePair<String>("user", AppContext.getInstance().getRut())),
					(new NamedValuePair<String>("namecmo", nameCmo)));

				}
				catch (Exception e){
					correct = false;
				}
			} else {
				newMess = StringConstants.VOTE_FAILURE;
				if (message.length() > 1) {
					switch(message.charAt(1)){
					case 'D':
						newMess += " - " + StringConstants.VOTE_DUPLICATED;
						break;
					case 'F':
						newMess += " - " + StringConstants.VOTE_FAILURE;
						break;
					case 'N':
						newMess += " - " + StringConstants.VOTE_NULL;
						break;
					case 'P':
						newMess += " - " + StringConstants.PERMISION_REQUIRED;
						break;
					}
				}
			}
			publishProgress(new Object[]{btn, success, newMess, correct});
		}
		@Override
		public void onCompletition() {
			// Nothing ToDo Here
		}
	}
	class VoteClearColorThread extends AsyncTask<Button, Object, Button>{
		@Override protected void onPreExecute(){

		}
		@Override protected Button doInBackground(Button... params) {
			Button btn = params[0];
			SystemClock.sleep(5000);
			return btn;
		}
		@Override protected void onProgressUpdate(Object... params){

		}
		@Override protected void onPostExecute(Button in){
			clearColors();
			enableButtons(true);
		}
	}
}
